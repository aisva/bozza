service:
  name: bozza-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    VERSION: v1
    USERS_PATH: users
    USERS_TABLE: Users-${self:provider.stage}
    TOKEN_SECRET: token-secret
    TOKEN_EXPIRATION_TIME: 7d

custom:
  serverless-offline:
    port: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

  documentation:
    api:
      info:
        version: v1.0.0
        title: Bozza
        description: Bozza app
    models:
      - name: CreateUserRequest
        contentType: application/json
        schema: ${file(models/create-user-request.json)}
      - name: SignInUserRequest
        contentType: application/json
        schema: ${file(models/sign-in-user-request.json)}
      - name: UpdateUserRequest
        contentType: application/json
        schema: ${file(models/update-user-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/authorizer.handler

  GetUser:
    handler: src/lambda/http/user/getUser.handler
    events:
      - http:
          method: get
          path: ${self:provider.environment.VERSION}/${self:provider.environment.USERS_PATH}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

  CreateUser:
    handler: src/lambda/http/user/createUser.handler
    events:
      - http:
          method: post
          path: ${self:provider.environment.VERSION}/${self:provider.environment.USERS_PATH}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new user
            description: Create a new user
            requestModels:
              'application/json': CreateUserRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

  SignInUser:
    handler: src/lambda/http/user/signInUser.handler
    events:
      - http:
          method: post
          path: ${self:provider.environment.VERSION}/${self:provider.environment.USERS_PATH}/signin
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Sign a user in
            description: Sign a user in
            requestModels:
              'application/json': SignInUserRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

  UpdateUser:
    handler: src/lambda/http/user/updateUser.handler
    events:
      - http:
          method: patch
          path: ${self:provider.environment.VERSION}/${self:provider.environment.USERS_PATH}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a user
            description: Update a user
            requestModels:
              'application/json': UpdateUserRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

  DeleteUser:
    handler: src/lambda/http/user/deleteUser.handler
    events:
      - http:
          method: delete
          path: ${self:provider.environment.VERSION}/${self:provider.environment.USERS_PATH}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false